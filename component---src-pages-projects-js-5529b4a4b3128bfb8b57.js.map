{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/utils/helpers.js"],"names":["data","allProjects","allMarkdownRemark","edges","allFeaturedImages","allFile","featuredImageMap","Utils","getImageMap","title","className","map","node","key","id","to","fields","slug","featuredImages","frontmatter","tags","excerpt","query","images","regex","hasMultipleImages","limit","reduce","image","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr"],"mappings":"8FAAA,0GAMe,sBAAe,IAAZA,EAAW,EAAXA,KACVC,EAAcD,EAAKE,kBAAkBC,OAAS,GAC9CC,EAAoBJ,EAAKK,QAAQF,OAAS,GAE1CG,EAAmBC,IAAMC,YAAYJ,EAD7B,sBACuD,EAAM,GAE3E,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKK,MAAM,aACX,kBAAC,IAAD,CAAWA,MAAM,aACjB,kBAAC,IAAD,CAAWC,UAAU,aACnB,iCACGT,EAAYU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACf,yBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,OAC3B,kBAAC,IAAD,CACEK,GAAIH,EAAKI,OAAOC,KAChBC,eAAgBZ,EAAiBM,EAAKI,OAAOC,MAC7CR,MAAOG,EAAKO,YAAYV,MACxBW,KAAMR,EAAKO,YAAYC,KACvBC,QAAST,EAAKS,UAEhB,qCASP,IAAMC,EAAK,c,0KCpCH,G,UAAA,CACbd,YAAa,SAACe,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAAChB,EAAKiB,GACzB,IAAMX,EAAOW,EAAMhB,KAAKiB,aAAaC,MAAMN,GAAO,GAClD,GAAIC,EACF,GAAId,EAAIoB,eAAed,GACjBN,EAAIM,GAAMe,QAAUN,GACtBf,EAAIM,GAAMgB,KAAKL,EAAMhB,KAAKsB,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKL,EAAMhB,KAAKsB,gBAAgBC,OACpCxB,EAAIM,GAAQmB,OAGdzB,EAAIM,GAAQW,EAAMhB,KAAKsB,gBAAgBC,MAEzC,OAAOxB,IACN","file":"component---src-pages-projects-js-5529b4a4b3128bfb8b57.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { PageLayout, PageTitle, ProjectLink } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport Container from \"react-bootstrap/Container\"\n\nexport default ({ data }) => {\n  const allProjects = data.allMarkdownRemark.edges || []\n  const allFeaturedImages = data.allFile.edges || []\n  const regex = /\\/[projects].*\\/|$/\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex, true, 3)\n\n  return (\n    <PageLayout>\n      <SEO title=\"Projects\" />\n      <PageTitle title=\"Projects\" />\n      <Container className=\"text-left\">\n        <section>\n          {allProjects.map(({ node }) => (\n            <div key={node.id} className=\"p-3\">\n              <ProjectLink\n                to={node.fields.slug}\n                featuredImages={featuredImageMap[node.fields.slug]}\n                title={node.frontmatter.title}\n                tags={node.frontmatter.tags}\n                excerpt={node.excerpt}\n              />\n              <hr />\n            </div>\n          ))}\n        </section>\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            title\n            description\n            tags\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { eq: \"png\" }\n        relativePath: { regex: \"/feature/\" }\n        relativeDirectory: { regex: \"/content/projects/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n","export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n}\n"],"sourceRoot":""}